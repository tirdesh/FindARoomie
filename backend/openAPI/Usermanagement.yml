openapi: 3.1.0
info:
  title: User Management API
  description: API for managing user accounts, including user creation, retrieval, update, login, password reset, and user retrieval by ID.
  version: '1.0'
servers:
  - url: https://localhost:8080
paths:
  /api/users:
    get:
      operationId: get-users
      description: Retrieve a list of users.
      responses:
        "200":
          description: List of users retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

  /api/users/{userId}:
    get:
      operationId: get-user-by-id
      description: Retrieve user details by ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: update-user
      description: Update user details by ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: User details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/signup:
    post:
      operationId: create-user
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Bad request, e.g., missing fields or invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict, e.g., email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/login:
    post:
      operationId: user-login
      description: Authenticate and log in a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: Unauthorized, invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/password-reset:
    post:
      operationId: reset-password
      description: Reset user password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        "200":
          description: Password reset successful.
        "401":
          description: Unauthorized, invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserListResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserResponse'

    UserRequest:
      type: object
      required:
        - firstName
        - lastName
        - phoneNumber
        - emailAddress
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          pattern: '^\+\d{1,3}\d{9,15}$' # Pattern for country code and phone number
          example: '+16089773131'
        emailAddress:
          type: string
          format: email # Format constraint for email
          example: john@example.com

    UserResponse:
      type: object
      required:
        - userId
        - firstName
        - lastName
        - emailAddress
        - phoneNumber
        - createdDate
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
        phoneNumber:
          type: string
        createdDate:
          type: string

    NewUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - phoneNumber
        - emailAddress
        - password
        - retypePassword
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          pattern: '^\+\d{1,3}\d{9,15}$' # Pattern for country code and phone number
          example: '+16089773131'
        emailAddress:
          type: string
          format: email # Format constraint for email
          example: john@example.com
        password:
          type: string
          example: Password123
        retypePassword:
          type: string
          example: Password123

    LoginRequest:
      type: object
      required:
        - emailAddress
        - password
      properties:
        emailAddress:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: Password123

    LoginResponse:
      type: object
      required:
        - userId
        - firstName
        - lastName
        - emailAddress
        - phoneNumber
        - createdDate
        - loginTime
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
        phoneNumber:
          type: string
        createdDate:
          type: string
        loginTime:
          type: string

    PasswordResetRequest:
      type: object
      required:
        - emailAddress
        - password
      properties:
        emailAddress:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: NewPassword123

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
